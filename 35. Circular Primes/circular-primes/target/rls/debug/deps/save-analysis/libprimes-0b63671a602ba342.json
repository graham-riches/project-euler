{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0","program":"/home/graham/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","primes","--edition=2018","/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=0b63671a602ba342","-C","extra-filename=-0b63671a602ba342","--out-dir","/mnt/c/Users/RichesGraham/Documents/Personal/Code/project-euler/35. Circular Primes/circular-primes/target/rls/debug/deps","-L","dependency=/mnt/c/Users/RichesGraham/Documents/Personal/Code/project-euler/35. Circular Primes/circular-primes/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/graham/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/mnt/c/Users/RichesGraham/Documents/Personal/Code/project-euler/35. Circular Primes/circular-primes/target/rls/debug/deps/libprimes-0b63671a602ba342.rmeta"},"prelude":{"crate_id":{"name":"primes","disambiguator":[1406273026453415450,3145206708905796419]},"crate_root":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src","external_crates":[{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15256637969148649584,12170509131058075833]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2572959971889902175,17506693968225989007]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7380289047210505863,13821127130725723065]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15494144285296940423,1517275930380298805]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16074686111301742862,11174094882134223101]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9848143689052418189,5596786287495938678]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4765876764407181064,11122159180720543906]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3249135693812064660,5763443684941168569]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17048817722375060837,16920886256309599893]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13552797903376776722,10482089333731059857]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5989449439605467183,7256304997069434828]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13279369789493161905,12463804053127379464]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[295047501211602818,3843164955111373824]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14781020588812023641,7393321088923443539]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1927264790928947756,6617054577979570835]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[7597657085106642381,11470551509849691989]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[2355022556203982070,155364045674250901]}},{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[3046834347757213021,4625500188193743608]}}],"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":0,"byte_end":11809,"line_start":1,"line_end":453,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":0,"byte_end":11809,"line_start":1,"line_end":453,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":28},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":30},{"krate":0,"index":90},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":32},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75}],"decl_id":null,"docs":"A basic library for finding primes, providing a basic Iterator over all primes. It is not as fast as\n`slow_primes`, but it is meant to be easy to use!","sig":null,"attributes":[{"value":"*\n\nA basic library for finding primes, providing a basic Iterator over all primes. It is not as fast as\n`slow_primes`, but it is meant to be easy to use!\n\nThe simplest usage is simply to create an `Iterator`:\n\n```\nuse primes::{Sieve, PrimeSet};\n\nlet mut pset = Sieve::new();\n\nfor (ix, n) in pset.iter().enumerate().take(10) {\n    println!(\"Prime {}: {}\", ix, n);\n}\n```\n\nThis library provides methods for generating primes, testing whether a number is prime, and\nfactorizing numbers. Most methods generate primes lazily, so only enough primes will be generated\nfor the given test, and primes are cached for later use.\n\n[*Source*](https://github.com/wackywendell/primes)\n\n# Example: Find the first prime after 1 million\n\n```\nuse primes::{Sieve, PrimeSet};\n\nlet mut pset = Sieve::new();\nlet (ix, n) = pset.find(1_000_000);\n\nprintln!(\"Prime {}: {}\", ix, n);\n```\n\n# Example: Find the first ten primes *after* the thousandth prime\n```\nuse primes::{Sieve, PrimeSet};\n\nlet mut pset = Sieve::new();\nfor (ix, n) in pset.iter().enumerate().skip(1_000).take(10) {\n    println!(\"Prime {}: {}\", ix, n);\n}\n```\n\n# Example: Find the first prime greater than 1000\n```\nuse primes::{Sieve, PrimeSet};\n\nlet mut pset = Sieve::new();\nlet (ix, n) = pset.find(1_000);\nprintln!(\"The first prime after 1000 is the {}th prime: {}\", ix, n);\n\nassert_eq!(pset.find(n), (ix, n));\n```\n\nFor more info on use, see `PrimeSet`, a class which encapsulates most of the functionality and has\nmultiple methods for iterating over primes.\n\nThis also provides a few functions unconnected to `PrimeSet`, which will be faster for the first\ncase, but slower in the long term as they do not use any caching of primes.\n\n*/","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":0,"byte_end":1675,"line_start":1,"line_end":62,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":1896,"byte_end":1910,"line_start":71,"line_end":71,"column_start":11,"column_end":25},"name":"PrimeSetBasics","qualname":"::PrimeSetBasics","value":"PrimeSetBasics","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":1974,"byte_end":1980,"line_start":73,"line_end":73,"column_start":8,"column_end":14},"name":"expand","qualname":"::PrimeSetBasics::expand","value":"pub fn expand(&mut Self)","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Finds one more prime, and adds it to the list\n","sig":null,"attributes":[{"value":"/ Finds one more prime, and adds it to the list","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":1917,"byte_end":1966,"line_start":72,"line_end":72,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":2051,"byte_end":2055,"line_start":76,"line_end":76,"column_start":8,"column_end":12},"name":"list","qualname":"::PrimeSetBasics::list","value":"pub fn list(&Self) -> &[u64]","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Return all primes found so far as a slice\n","sig":null,"attributes":[{"value":"/ Return all primes found so far as a slice","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":1998,"byte_end":2043,"line_start":75,"line_end":75,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":76},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":2281,"byte_end":2294,"line_start":86,"line_end":86,"column_start":12,"column_end":25},"name":"TrialDivision","qualname":"::TrialDivision","value":"TrialDivision {  }","parent":null,"children":[{"krate":0,"index":77}],"decl_id":null,"docs":"A prime generator, using the Trial Division method.","sig":null,"attributes":[{"value":"*\nA prime generator, using the Trial Division method.\n\nCreate with `let mut pset = TrialDivision::new()`, and then use `pset.iter()` to iterate over all\nprimes.\n**/","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":2077,"byte_end":2243,"line_start":79,"line_end":84,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":90},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":3004,"byte_end":3009,"line_start":117,"line_end":117,"column_start":12,"column_end":17},"name":"Sieve","qualname":"::Sieve","value":"Sieve {  }","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93}],"decl_id":null,"docs":"A prime generator, using the Sieve of Eratosthenes method. This is asymptotically more efficient\nthan the Trial Division method, but slower earlier on.","sig":null,"attributes":[{"value":"*\nA prime generator, using the Sieve of Eratosthenes method. This is asymptotically more efficient\nthan the Trial Division method, but slower earlier on.\n\nCreate with `let mut pset = Sieve::new()`, and then use `pset.iter()` to iterate over all primes.\n**/","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":2708,"byte_end":2966,"line_start":110,"line_end":115,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":32},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":3468,"byte_end":3480,"line_start":132,"line_end":132,"column_start":12,"column_end":24},"name":"PrimeSetIter","qualname":"::PrimeSetIter","value":"PrimeSetIter {  }","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37}],"decl_id":null,"docs":" An iterator over generated primes. Created by `PrimeSet::iter` or\n `PrimeSet::generator`\n","sig":null,"attributes":[{"value":"/ An iterator over generated primes. Created by `PrimeSet::iter` or","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":3361,"byte_end":3430,"line_start":130,"line_end":130,"column_start":1,"column_end":70}},{"value":"/ `PrimeSet::generator`","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":3431,"byte_end":3456,"line_start":131,"line_end":131,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":3636,"byte_end":3639,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<TrialDivision>::new","value":"pub fn new() -> TrialDivision","parent":null,"children":[],"decl_id":null,"docs":" A new prime generator, primed with 2 and 3\n","sig":null,"attributes":[{"value":"/ A new prime generator, primed with 2 and 3","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":3578,"byte_end":3624,"line_start":139,"line_end":139,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":4441,"byte_end":4444,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<Sieve>::new","value":"pub fn new() -> Sieve","parent":null,"children":[],"decl_id":null,"docs":" A new prime generator, primed with 2 and 3\n","sig":null,"attributes":[{"value":"/ A new prime generator, primed with 2 and 3","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":4383,"byte_end":4429,"line_start":174,"line_end":174,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":49},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6200,"byte_end":6208,"line_start":230,"line_end":230,"column_start":11,"column_end":19},"name":"PrimeSet","qualname":"::PrimeSet","value":"PrimeSet: PrimeSetBasics + Sized","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6280,"byte_end":6283,"line_start":232,"line_end":232,"column_start":8,"column_end":11},"name":"len","qualname":"::PrimeSet::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Number of primes found so far\n","sig":null,"attributes":[{"value":"/ Number of primes found so far","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6239,"byte_end":6272,"line_start":231,"line_end":231,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6342,"byte_end":6350,"line_start":236,"line_end":236,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::PrimeSet::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6460,"byte_end":6469,"line_start":241,"line_end":241,"column_start":8,"column_end":17},"name":"generator","qualname":"::PrimeSet::generator","value":"pub fn generator(&mut Self) -> PrimeSetIter<, Self>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Iterator over all primes not yet found\n","sig":null,"attributes":[{"value":"/ Iterator over all primes not yet found","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6410,"byte_end":6452,"line_start":240,"line_end":240,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6786,"byte_end":6790,"line_start":252,"line_end":252,"column_start":8,"column_end":12},"name":"iter","qualname":"::PrimeSet::iter","value":"pub fn iter(&mut Self) -> PrimeSetIter<, Self>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Iterator over all primes, starting with 2. If you don't care about the \"state\" of the\n `PrimeSet`, this is what you want!\n","sig":null,"attributes":[{"value":"/ Iterator over all primes, starting with 2. If you don't care about the \"state\" of the","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6646,"byte_end":6735,"line_start":250,"line_end":250,"column_start":5,"column_end":94}},{"value":"/ `PrimeSet`, this is what you want!","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6740,"byte_end":6778,"line_start":251,"line_end":251,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6989,"byte_end":6997,"line_start":261,"line_end":261,"column_start":8,"column_end":16},"name":"iter_vec","qualname":"::PrimeSet::iter_vec","value":"pub fn iter_vec(&Self) -> slice::Iter<, u64>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Iterator over just the primes found so far\n","sig":null,"attributes":[{"value":"/ Iterator over just the primes found so far","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6935,"byte_end":6981,"line_start":260,"line_end":260,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":7235,"byte_end":7239,"line_start":270,"line_end":270,"column_start":8,"column_end":12},"name":"find","qualname":"::PrimeSet::find","value":"pub fn find(&mut Self, u64) -> (usize, u64)","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Find the next largest prime from a number","sig":null,"attributes":[{"value":"/ Find the next largest prime from a number","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":7065,"byte_end":7110,"line_start":265,"line_end":265,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":7115,"byte_end":7118,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Returns `(idx, prime)`","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":7123,"byte_end":7149,"line_start":267,"line_end":267,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":7154,"byte_end":7157,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Note that if `n` is prime, then the output will be `(idx, n)`","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":7162,"byte_end":7227,"line_start":269,"line_end":269,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":7595,"byte_end":7603,"line_start":281,"line_end":281,"column_start":8,"column_end":16},"name":"is_prime","qualname":"::PrimeSet::is_prime","value":"pub fn is_prime(&mut Self, u64) -> bool","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Check if a number is prime","sig":null,"attributes":[{"value":"/ Check if a number is prime","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":7415,"byte_end":7445,"line_start":277,"line_end":277,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":7450,"byte_end":7453,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Note that this only requires primes up to `n.sqrt()` to be generated, and will generate","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":7458,"byte_end":7549,"line_start":279,"line_end":279,"column_start":5,"column_end":96}},{"value":"/ them as necessary on its own.","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":7554,"byte_end":7587,"line_start":280,"line_end":280,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":8242,"byte_end":8250,"line_start":304,"line_end":304,"column_start":8,"column_end":16},"name":"find_vec","qualname":"::PrimeSet::find_vec","value":"pub fn find_vec(&Self, u64) -> Option<(usize, u64)>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Find the next largest prime from a number, if it is within the already-found list","sig":null,"attributes":[{"value":"/ Find the next largest prime from a number, if it is within the already-found list","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":8032,"byte_end":8117,"line_start":299,"line_end":299,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":8122,"byte_end":8125,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ Returns `(idx, prime)`","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":8130,"byte_end":8156,"line_start":301,"line_end":301,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":8161,"byte_end":8164,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Note that if `n` is prime, then the output will be `(idx, n)`","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":8169,"byte_end":8234,"line_start":303,"line_end":303,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":8961,"byte_end":8964,"line_start":329,"line_end":329,"column_start":8,"column_end":11},"name":"get","qualname":"::PrimeSet::get","value":"pub fn get(&mut Self, usize) -> u64","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Get the nth prime, even if we haven't yet found it\n","sig":null,"attributes":[{"value":"/ Get the nth prime, even if we haven't yet found it","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":8899,"byte_end":8953,"line_start":328,"line_end":328,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":9229,"byte_end":9242,"line_start":337,"line_end":337,"column_start":8,"column_end":21},"name":"prime_factors","qualname":"::PrimeSet::prime_factors","value":"pub fn prime_factors(&mut Self, u64) -> Vec<u64>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Get the prime factors of a number, starting from 2, including repeats\n","sig":null,"attributes":[{"value":"/ Get the prime factors of a number, starting from 2, including repeats","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":9148,"byte_end":9221,"line_start":336,"line_end":336,"column_start":5,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":10877,"byte_end":10884,"line_start":406,"line_end":406,"column_start":8,"column_end":15},"name":"factors","qualname":"::factors","value":"pub fn factors(u64) -> Vec<u64>","parent":null,"children":[],"decl_id":null,"docs":" Find all prime factors of a number\n Does not use a `PrimeSet`, but simply counts upwards\n","sig":null,"attributes":[{"value":"/ Find all prime factors of a number","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":10774,"byte_end":10812,"line_start":404,"line_end":404,"column_start":1,"column_end":39}},{"value":"/ Does not use a `PrimeSet`, but simply counts upwards","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":10813,"byte_end":10869,"line_start":405,"line_end":405,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":11241,"byte_end":11253,"line_start":425,"line_end":425,"column_start":8,"column_end":20},"name":"factors_uniq","qualname":"::factors_uniq","value":"pub fn factors_uniq(u64) -> Vec<u64>","parent":null,"children":[],"decl_id":null,"docs":" Find all unique prime factors of a number\n","sig":null,"attributes":[{"value":"/ Find all unique prime factors of a number","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":11188,"byte_end":11233,"line_start":424,"line_end":424,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":11716,"byte_end":11724,"line_start":448,"line_end":448,"column_start":8,"column_end":16},"name":"is_prime","qualname":"::is_prime","value":"pub fn is_prime(u64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether a number is prime. Checks every odd number up to `sqrt(n)`.\n","sig":null,"attributes":[{"value":"/ Test whether a number is prime. Checks every odd number up to `sqrt(n)`.","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":11632,"byte_end":11708,"line_start":447,"line_end":447,"column_start":1,"column_end":77}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":2465,"byte_end":2472,"line_start":98,"line_end":98,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":3558,"byte_end":3571,"line_start":138,"line_end":138,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":3736,"byte_end":3749,"line_start":145,"line_end":145,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":4371,"byte_end":4376,"line_start":173,"line_end":173,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":4919,"byte_end":4924,"line_start":190,"line_end":190,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":9837,"byte_end":9838,"line_start":361,"line_end":361,"column_start":38,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":9865,"byte_end":9878,"line_start":363,"line_end":363,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":10020,"byte_end":10032,"line_start":370,"line_end":370,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":2465,"byte_end":2472,"line_start":98,"line_end":98,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":82},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":3558,"byte_end":3571,"line_start":138,"line_end":138,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":76},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":3736,"byte_end":3749,"line_start":145,"line_end":145,"column_start":25,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":76},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":4371,"byte_end":4376,"line_start":173,"line_end":173,"column_start":6,"column_end":11},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":90},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":4919,"byte_end":4924,"line_start":190,"line_end":190,"column_start":25,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":90},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6210,"byte_end":6224,"line_start":230,"line_end":230,"column_start":21,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":25},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":6227,"byte_end":6232,"line_start":230,"line_end":230,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":9837,"byte_end":9838,"line_start":361,"line_end":361,"column_start":38,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":61},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":9865,"byte_end":9878,"line_start":363,"line_end":363,"column_start":23,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":76},"to":{"krate":2,"index":3149}},{"span":{"file_name":"/home/graham/.cargo/registry/src/github.com-1ecc6299db9ec823/primes-0.3.0/src/lib.rs","byte_start":10020,"byte_end":10032,"line_start":370,"line_end":370,"column_start":36,"column_end":48},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":32},"to":{"krate":2,"index":7310}}]}